// GENERATED FILE: Do not edit, all changes will be lost.

// Package {{.PkgName}} contains the content of files from {{.RootName}}. It
// is generated by:
//     https://github.com/aybabtme/gostatic
package {{.PkgName}}

import (
    "bytes"
    "compress/gzip"
    "io/ioutil"
    "log"
)

// Get{{.RootName}} will lookup the static assets. It returns a *bytes.Reader
// and true if found, false otherwise. The static assets contain exactly the
// following entries:
// {{range $name, $data := .RootMap}}
//   {{$name}}{{end}}
//
func Get{{.RootName}}(filename string) (*bytes.Reader, bool) {
    data, ok := decompressed{{.RootName}}[filename]
    return bytes.NewReader(data), ok
}

// List{{.RootName}} will return all the static assets sharing root
// {{.RootName}}.
func List{{.RootName}}() (map[string]*bytes.Reader) {
    out := make(map[string]*bytes.Reader, len(decompressed{{.RootName}}))
    for k, v := range decompressed{{.RootName}} {
        out[k] = bytes.NewReader(v)
    }
    return out
}

var decompressed{{.RootName}} = make(map[string][]byte)

func init() {

    var compressed = [...]struct {
        name   string
        gzip256 string
    }{ {{range $name, $data := .RootMap}}
        {"{{$name}}", `{{$data}}`},{{end}}
    }

    base256 := 'a'
    decode := func(src string) []byte {
        dst := bytes.NewBuffer(make([]byte, 0, len(src)))
        buf := bytes.NewBufferString(src)
        for buf.Len() != 0 {
            r, _, _ := buf.ReadRune()
            _, _ = dst.WriteByte(byte(r - base256))
        }
        return dst.Bytes()
    }

    for _, file := range compressed {
        gzipdata := decode(file.gzip256)
        gr, err := gzip.NewReader(bytes.NewBuffer(gzipdata))
        if err != nil {
            log.Panicf("Couldn't open gzip stream for data for %q: %v", file.name, err)
        }
        data, err := ioutil.ReadAll(gr)
        if err != nil {
            log.Panicf("Couldn't decompress gzip data in %q: %v", file.name, err)
        }
        decompressed{{.RootName}}[file.name] = data
    }
}
